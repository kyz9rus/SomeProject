-- Script for inserting values to input table
create function input_inserter(integer)
  returns void
language plpgsql
as $$
DECLARE
  N ALIAS for $1;
  v_temperature real;
  v_x real;
  v_y real;

BEGIN
  for i in 1..N loop

    v_temperature = round( ((random() * 1000) / 50)::numeric, 2);
    v_x = round( ((random() * 1000) / 100)::numeric, 2);
    v_y = round( ((random() * 1000) / 100)::numeric, 2);

    insert into input (temperature, x, y) values (v_temperature, v_x, v_y);

  end loop;
END
$$;

alter function input_inserter(integer)
  owner to postgres;


-- Script for inserting values to sensor table
create function sensor_inserter(integer)
  returns void
language plpgsql
as $$
DECLARE
  N ALIAS for $1;
  length integer;
  i INTEGER DEFAULT 1;
  count integer default 0;
  chars text[] = '{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}' ;
  model text;
BEGIN
  for i in 1..N loop
    length = random() * 10;

      while count < length or model=null loop
        model = concat(chars[1+random()*(array_length(chars, 1)-1)], model);
        count = count+1;
      end loop;

    insert into sensor values(DEFAULT, initcap(model));
    model = NULL;
    count = 0;
  end loop;
END
$$;
